// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: servicio.proto

package Grupo10_Laboratorio_3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MiServicio_MiMetodo_FullMethodName = "/main.MiServicio/MiMetodo"
)

// MiServicioClient is the client API for MiServicio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiServicioClient interface {
	MiMetodo(ctx context.Context, in *MiMensaje, opts ...grpc.CallOption) (*Respuesta, error)
}

type miServicioClient struct {
	cc grpc.ClientConnInterface
}

func NewMiServicioClient(cc grpc.ClientConnInterface) MiServicioClient {
	return &miServicioClient{cc}
}

func (c *miServicioClient) MiMetodo(ctx context.Context, in *MiMensaje, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, MiServicio_MiMetodo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiServicioServer is the server API for MiServicio service.
// All implementations must embed UnimplementedMiServicioServer
// for forward compatibility
type MiServicioServer interface {
	MiMetodo(context.Context, *MiMensaje) (*Respuesta, error)
	mustEmbedUnimplementedMiServicioServer()
}

// UnimplementedMiServicioServer must be embedded to have forward compatible implementations.
type UnimplementedMiServicioServer struct {
}

func (UnimplementedMiServicioServer) MiMetodo(context.Context, *MiMensaje) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiMetodo not implemented")
}
func (UnimplementedMiServicioServer) mustEmbedUnimplementedMiServicioServer() {}

// UnsafeMiServicioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiServicioServer will
// result in compilation errors.
type UnsafeMiServicioServer interface {
	mustEmbedUnimplementedMiServicioServer()
}

func RegisterMiServicioServer(s grpc.ServiceRegistrar, srv MiServicioServer) {
	s.RegisterService(&MiServicio_ServiceDesc, srv)
}

func _MiServicio_MiMetodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiMensaje)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiServicioServer).MiMetodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiServicio_MiMetodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiServicioServer).MiMetodo(ctx, req.(*MiMensaje))
	}
	return interceptor(ctx, in, info, handler)
}

// MiServicio_ServiceDesc is the grpc.ServiceDesc for MiServicio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiServicio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.MiServicio",
	HandlerType: (*MiServicioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MiMetodo",
			Handler:    _MiServicio_MiMetodo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servicio.proto",
}
