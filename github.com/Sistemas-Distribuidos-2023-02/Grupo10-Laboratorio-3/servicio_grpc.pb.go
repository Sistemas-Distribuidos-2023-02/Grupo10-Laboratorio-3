// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: servicio.proto

package Grupo10_Laboratorio_3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MiServicio_AgregarBase_FullMethodName      = "/main.MiServicio/AgregarBase"
	MiServicio_RenombrarBase_FullMethodName    = "/main.MiServicio/RenombrarBase"
	MiServicio_ActualizarValor_FullMethodName  = "/main.MiServicio/ActualizarValor"
	MiServicio_BorrarBase_FullMethodName       = "/main.MiServicio/BorrarBase"
	MiServicio_GetSoldados_FullMethodName      = "/main.MiServicio/GetSoldados"
	MiServicio_ObtenerRegistros_FullMethodName = "/main.MiServicio/ObtenerRegistros"
)

// MiServicioClient is the client API for MiServicio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiServicioClient interface {
	AgregarBase(ctx context.Context, in *AgregarBaseRequest, opts ...grpc.CallOption) (*Respuesta, error)
	RenombrarBase(ctx context.Context, in *RenombrarBaseRequest, opts ...grpc.CallOption) (*Respuesta, error)
	ActualizarValor(ctx context.Context, in *ActualizarValorRequest, opts ...grpc.CallOption) (*Respuesta, error)
	BorrarBase(ctx context.Context, in *BorrarBaseRequest, opts ...grpc.CallOption) (*Respuesta, error)
	GetSoldados(ctx context.Context, in *GetSoldadosRequest, opts ...grpc.CallOption) (*Respuesta, error)
	ObtenerRegistros(ctx context.Context, in *RegistroRequest, opts ...grpc.CallOption) (*RegistroResponse, error)
}

type miServicioClient struct {
	cc grpc.ClientConnInterface
}

func NewMiServicioClient(cc grpc.ClientConnInterface) MiServicioClient {
	return &miServicioClient{cc}
}

func (c *miServicioClient) AgregarBase(ctx context.Context, in *AgregarBaseRequest, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, MiServicio_AgregarBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miServicioClient) RenombrarBase(ctx context.Context, in *RenombrarBaseRequest, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, MiServicio_RenombrarBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miServicioClient) ActualizarValor(ctx context.Context, in *ActualizarValorRequest, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, MiServicio_ActualizarValor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miServicioClient) BorrarBase(ctx context.Context, in *BorrarBaseRequest, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, MiServicio_BorrarBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miServicioClient) GetSoldados(ctx context.Context, in *GetSoldadosRequest, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, MiServicio_GetSoldados_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miServicioClient) ObtenerRegistros(ctx context.Context, in *RegistroRequest, opts ...grpc.CallOption) (*RegistroResponse, error) {
	out := new(RegistroResponse)
	err := c.cc.Invoke(ctx, MiServicio_ObtenerRegistros_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiServicioServer is the server API for MiServicio service.
// All implementations must embed UnimplementedMiServicioServer
// for forward compatibility
type MiServicioServer interface {
	AgregarBase(context.Context, *AgregarBaseRequest) (*Respuesta, error)
	RenombrarBase(context.Context, *RenombrarBaseRequest) (*Respuesta, error)
	ActualizarValor(context.Context, *ActualizarValorRequest) (*Respuesta, error)
	BorrarBase(context.Context, *BorrarBaseRequest) (*Respuesta, error)
	GetSoldados(context.Context, *GetSoldadosRequest) (*Respuesta, error)
	ObtenerRegistros(context.Context, *RegistroRequest) (*RegistroResponse, error)
	mustEmbedUnimplementedMiServicioServer()
}

// UnimplementedMiServicioServer must be embedded to have forward compatible implementations.
type UnimplementedMiServicioServer struct {
}

func (UnimplementedMiServicioServer) AgregarBase(context.Context, *AgregarBaseRequest) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgregarBase not implemented")
}
func (UnimplementedMiServicioServer) RenombrarBase(context.Context, *RenombrarBaseRequest) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenombrarBase not implemented")
}
func (UnimplementedMiServicioServer) ActualizarValor(context.Context, *ActualizarValorRequest) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActualizarValor not implemented")
}
func (UnimplementedMiServicioServer) BorrarBase(context.Context, *BorrarBaseRequest) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrarBase not implemented")
}
func (UnimplementedMiServicioServer) GetSoldados(context.Context, *GetSoldadosRequest) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoldados not implemented")
}
func (UnimplementedMiServicioServer) ObtenerRegistros(context.Context, *RegistroRequest) (*RegistroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerRegistros not implemented")
}
func (UnimplementedMiServicioServer) mustEmbedUnimplementedMiServicioServer() {}

// UnsafeMiServicioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiServicioServer will
// result in compilation errors.
type UnsafeMiServicioServer interface {
	mustEmbedUnimplementedMiServicioServer()
}

func RegisterMiServicioServer(s grpc.ServiceRegistrar, srv MiServicioServer) {
	s.RegisterService(&MiServicio_ServiceDesc, srv)
}

func _MiServicio_AgregarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgregarBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiServicioServer).AgregarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiServicio_AgregarBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiServicioServer).AgregarBase(ctx, req.(*AgregarBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiServicio_RenombrarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenombrarBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiServicioServer).RenombrarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiServicio_RenombrarBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiServicioServer).RenombrarBase(ctx, req.(*RenombrarBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiServicio_ActualizarValor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActualizarValorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiServicioServer).ActualizarValor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiServicio_ActualizarValor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiServicioServer).ActualizarValor(ctx, req.(*ActualizarValorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiServicio_BorrarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrarBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiServicioServer).BorrarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiServicio_BorrarBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiServicioServer).BorrarBase(ctx, req.(*BorrarBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiServicio_GetSoldados_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoldadosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiServicioServer).GetSoldados(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiServicio_GetSoldados_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiServicioServer).GetSoldados(ctx, req.(*GetSoldadosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiServicio_ObtenerRegistros_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiServicioServer).ObtenerRegistros(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiServicio_ObtenerRegistros_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiServicioServer).ObtenerRegistros(ctx, req.(*RegistroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MiServicio_ServiceDesc is the grpc.ServiceDesc for MiServicio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiServicio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.MiServicio",
	HandlerType: (*MiServicioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AgregarBase",
			Handler:    _MiServicio_AgregarBase_Handler,
		},
		{
			MethodName: "RenombrarBase",
			Handler:    _MiServicio_RenombrarBase_Handler,
		},
		{
			MethodName: "ActualizarValor",
			Handler:    _MiServicio_ActualizarValor_Handler,
		},
		{
			MethodName: "BorrarBase",
			Handler:    _MiServicio_BorrarBase_Handler,
		},
		{
			MethodName: "GetSoldados",
			Handler:    _MiServicio_GetSoldados_Handler,
		},
		{
			MethodName: "ObtenerRegistros",
			Handler:    _MiServicio_ObtenerRegistros_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servicio.proto",
}
